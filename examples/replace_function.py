# -*- coding: utf-8 -*-
# Replace all calls to a function with a different function name.
# One use case is to replace all calls to openf and script_resource
# to custom functions that access files from a different location
# such as a file share or artifact store. 

import sys
import sleepy.ast
from sleepy.parser import *

functionName = ''
newName = ''
def replace_function_calls(node):
    if isinstance(node, Call) and node.function == functionName:
        node.function = newName
    return node

if len(sys.argv) > 3:
    functionName = sys.argv[1]
    newName = sys.argv[2]
    parser = SleepParser(quiet=True)
    with open(sys.argv[3], 'r') as file:
        script = parser.parse(file.read(), tracking=True)
        # Filter any empty statements that may have been generated by syntax errors
        script.body = [_ for _ in script.body if _]
        # Replace all calls to the target function
        print(sleepy.ast.format(walk(script, replace_function_calls)))
else:
    print('{} <function name> <new name> <script path>'.format(sys.argv[0]))