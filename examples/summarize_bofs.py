import json
import sys
from sleepy.parser import *

bofs = {}
if len(sys.argv) > 1:
    path = sys.argv[1]
    with open(path, 'r') as file:
        parser = SleepParser(quiet=True)
        ast = parser.parse(file.read(), tracking=True)
        # Filter any empty statements that may have been generated by syntax errors
        ast = [_ for _ in ast if _]
        # Enumerate all of the declared beacon commands that use a bof
        for statement in ast:
            # First enumerate all beacon commands
            if statement[0] == 'alias':
                bofFile = None
                argFormat = ''
                command = statement[1]
                # Enumerate all statements in the command's body
                # Check for if any use bof_pack or beacon_inline_execute
                # We're making the assumption these will only happen at most once
                for statement in statement[2].data:
                    # We're making the assumption this will only happen once
                    if statement and statement[0] == '=':
                        rhs = statement[2]
                        if type(rhs) == tuple and len(rhs) > 1 and rhs[1] == 'bof_pack':
                            argFormat = rhs[2][1]
                    # Check if one of the statements is used to run beacon_inline_execute
                    if statement and statement[1] == 'beacon_inline_execute':
                        bofArg = statement[2][1]
                        if type(bofArg) == tuple and len(bofArg) > 1 and bofArg[1] == 'readbof':
                            bofFile = bofArg[2][1]
                if bofFile:
                    bofs[bofFile] = {
                        'arg_format': argFormat
                    }
        # Enumerate all of the registered help information for a bof
        # We're assuming that the bof name matches the command name for the help information
        for statement in ast:
            if statement[1] == 'beacon_command_register':
                args = statement[2]
                if args[0] in bofs:
                    bofs[args[0]]['help_short'] = args[1]
                    bofs[args[0]]['help_long'] = args[2]
    print(json.dumps(bofs, indent=4))
else:
    print('{} <path>'.format(sys.argv[0]))